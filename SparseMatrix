import java.util.Arrays;
import java.util.Scanner;

//0 5 0 0 0 8 0 0 0 1 0 0
public class SparseMatrix{
	static int max=100;
	static Scanner sc=new Scanner(System.in);
	private final int row;
	private final int col;
	private final int[][]matrix;
	static int i;
	static int count=0;
	static int[][] sparse= new int[max][3];

	public SparseMatrix(int row,int col)
	{
		this.row=row;
		this.col=col;
		matrix =new int[row][col];
	}
	
	public int getMatrixRow(){
		return row;
	}
	
	public int getMatrixColumn(){
		return col;
	}
	static void transpose(int matrix[][],int len)
	{
		int temp;
		for(i=0;i<len;i++)
		{
			temp=matrix[i][0];
			matrix[i][0]=matrix[i][1];
			matrix[i][1]=temp;
		}
		System.out.println("Sparse Transpose :");
		showSparse(matrix, len);
		
	}	
		public static void showSparse(int[][] m,int len)
		{
			
			for(i=0;i<len;i++)
			{
				System.out.println(m[i][0]+" "+m[i][1]+" "+m[i][2]);
			}
		}
		 public static void display(int[][] mat,int R,int C)
		   {
		    for(int i=0;i<R;i++)
		    {
		      for(int j=0;j<C;j++)
		      {
		        System.out.print(mat[i][j]+" ");
		      }
		      System.out.println();
		    }
		  }
		 
	public int[][] convertMatrixToSparse(int R, int C)
	{
		count=0;
		int[][] array=new int[R][C];
//		int[][] sparse= new int[max][3];
		int i,j;
		
		for(i=0;i<R;i++)
		{
			for(j=0;j<C;j++)
			{
				array[i][j]=sc.nextInt();
				if(array[i][j]!=0)
				{
					sparse[count][0]=i;
					sparse[count][1]=j;
					sparse[count][2]=array[i][j];
					count++;
				}
			}
		}
		System.out.println("Matrix entered by user is :");
		display(array,R,C);
		return sparse;
	}
	
	private void addition(SparseMatrix sm) {

		int j=0,i=0,k=0;
//		int[][] result= new int[count+sm.count][3];
		SparseMatrix result= new SparseMatrix(count+sm.count, 3);
            while ( i < row && j < sm.row ) 
            {
                // If secondMatrix's row and column is smaller
                if (sparse[i][0] > sm.sparse[j][0] || 
                   (sparse[i][0] == sm.sparse[j][0] && 
                	sparse[i][1] > sm.sparse[j][1]))
                {
                	
                    result.sparse[k][0] = sm.sparse[j][0];
                    result.sparse[k][1] = sm.sparse[j][1];
                    result.sparse[k][2] = sm.sparse[j][2];
         
                    k++;
                    j++;
                }
                else if(sparse[i][0] < sm.sparse[j][0] || 
                	   (sparse[i][0] == sm.sparse[j][0] 
                	   && sparse[i][1] < sm.sparse[j][1]))
                {	
                	  result.sparse[k][0] = sparse[i][0];
                	  result.sparse[k][1] = sparse[i][1];
                	  result.sparse[k][2] = sparse[i][2];
                   
                	 k++;
                     i++;
                }
                else 
                {
                    // Add the values when row and column are same
                    int sum = sparse[i][2] + sm.sparse[j][2];
 
                    if (sum != 0)
                    {
                    	result.sparse[k][0] = sparse[i][0];
                   	  	result.sparse[k][1] = sparse[i][1];
                   	  	result.sparse[k][2] = sum;
                    }   
                    k++;
                    i++;
                    j++;
                }
            }
 
            // Inserting remaining elements
            while ( i < count )
            {
            	result.sparse[k][0] = sparse[i][0];
            	result.sparse[k][1] = sparse[i][1];
            	result.sparse[k][2] = sparse[i][2];
            	i++;
            	k++;
            }
            while ( j < sm.count )
            {
            	result.sparse[k][0] = sm.sparse[j][0];
            	result.sparse[k][1] = sm.sparse[j][1];
            	result.sparse[k][2] = sm.sparse[j][2];
            	j++;
            	k++;
            }
            result.count = k; 
            int[][] sum = new int[result.count][3];
            
            for(int x = 0; x < result.count; x++)
            	for( int y = 0; y < 3; y++)
            		sum[x][y] = result.sparse[x][y];
     
            showSparse(sum, sum.length);
        }
		
		
//		int R=result[0].length;
//		int C=result[1].length;
//		System.out.println("Sparse matrix after addition is :");
//		display(result,R,C);
	
	
	public static void main(String [] args)
	{	int R1,C1,R2,C2;
		System.out.println("enter dimensions i.e., R and C of sparse matrix to create");
		R1 =sc.nextInt();
		C1=sc.nextInt();
		SparseMatrix sm1=new SparseMatrix(R1,C1);
		System.out.println("enter "+R1*C1 +" elements of first matrix");
		int[][] sparse1= sm1.convertMatrixToSparse(R1,C1);

		int len=sparse1.length;

		System.out.println("Sparse matrix representation is :");
		showSparse(sparse1, count);
		transpose(sparse1,count);
		
		System.out.println("enter dimensions of 2nd matrix i.e., R and C of sparse matrix to create");
		R2 =sc.nextInt();
		C2=sc.nextInt();
		SparseMatrix sm2=new SparseMatrix(R2,C2);
		System.out.println("enter "+R2*C2 +" elements of first matrix");
		int[][] sparse2= sm2.convertMatrixToSparse(R2,C2);
		System.out.println("Sparse matrix representation is :");
		showSparse(sparse2, count);
		System.out.println("Addition is :");
		sm1.addition(sm2);
	}

	
}
